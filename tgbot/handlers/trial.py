from datetime import datetime, timedelta
from typing import Optional
import os

from aiogram import Router, F, Bot
from aiogram.types import Message, FSInputFile
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from tgbot.config import config
from tgbot.db.db_api import subs, trial, files
from tgbot.services.apsched import send_message_trial

from tgbot.services.get_trial_image import get_trial_image_filename

from tgbot.keyboards.inline import (
    support_keyboard,
    settings_keyboard,
)
from tgbot.keyboards.reply import choose_plan_keyboard

trial_router = Router()


@trial_router.message(F.text.in_({"üî• –ê–ö–¶–ò–Ø!!! üî• ‚è± –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 1 –¥–µ–Ω—å"}))
async def process_pay(query: Message, bot: Bot, apscheduler: AsyncIOScheduler):
    user_id: int = query.from_user.id
    date: datetime = datetime.now()

    user = query.from_user.full_name
    username = query.from_user.username

    sub: Optional[dict] = await subs.find_one(
        filter={"user_id": user_id}
    )

    if sub:
        sub_flag = sub.get("client_id")
        if len(sub_flag) > 10:
            await query.answer(
                text="–ò–∑–≤–∏–Ω–∏—Ç–µ! –í—ã —É–∂–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º üò™"
                "–ê–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑",
                reply_markup=choose_plan_keyboard,
            )
        else:
            await query.answer(
                text="‚úÖ –í—ã —É–∂–µ –æ—Ñ–æ—Ä–º–ª—è–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É\n"
                "–ê–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
                reply_markup=choose_plan_keyboard,
            )
    else:
        image_filename = ""
        client_id = ""
        pk = ""

        async for image in get_trial_image_filename():
            image_filename = image
            break

        try:
            pk = image_filename.split("/")[2].split(".")[0]
            client_id = "Client_‚Ññ" + pk + "_TRIAL"

        except Exception as e:
            print(e)

        if not os.path.exists(image_filename):
            await query.answer(
                text="–ò–∑–≤–∏–Ω–∏—Ç–µ! –õ–∏–º–∏—Ç –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è üò™\n"
                     "–ñ–¥–∏—Ç–µ –∞–Ω–æ–Ω—Å–∞ –Ω–æ–≤–æ–π –∞–∫—Ü–∏–∏ –≤ –Ω–∞—à–∏—Ö —Å–æ—Ü —Å–µ—Ç—è—Ö üôà",
                reply_markup=support_keyboard,
            )
        else:
            await subs.delete_many(filter={"user_id": user_id})

            end_date = date + timedelta(days=1)

            await trial.insert_one(
                {
                    "user_id": user_id,
                    "trial_flag": "on",
                    "start_date": date,
                    "end_date": end_date,
                }
            )

            await subs.insert_one(
                document={
                    "user_id": user_id,
                    "start_date": date,
                    "end_date": end_date,
                    "client_id": client_id,
                }
            )

            image_from_pc = FSInputFile(image_filename)

            end_date_str: str = end_date.strftime("%d.%m.%Y")

            result = await query.answer_photo(
                photo=image_from_pc,
                caption=f"‚úÖ  –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!!! \n\n\n"
                f"–í–∞—à QR - –∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ‚§¥Ô∏è \n\n"
                f"<b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞:</b> –¥–æ {end_date_str}\n\n"
                f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                reply_markup=settings_keyboard,
            )

            await files.insert_one(
                {"user_id": user_id, "photo_id": result.photo[-1].file_id, "pk": pk}
            )
            os.remove(image_filename)

            apscheduler.add_job(
                send_message_trial,
                trigger="date",
                run_date=datetime.now() + timedelta(seconds=10810),
                kwargs={
                    "bot": bot,
                    "chat_id": config.tg_bot.channel_id,
                    "user": user,
                    "username": username,
                },
            )
