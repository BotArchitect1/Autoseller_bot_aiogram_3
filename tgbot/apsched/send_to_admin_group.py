import logging
from datetime import datetime

from aiogram import Bot

from tgbot.config import config
from tgbot.mongo_db.get_data_in_mongodb import get_data_in_subs


async def notification_to_admin_group(bot: Bot):
    today = datetime.now()
    reminder_days = 1  # –ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏

    clients = await get_data_in_subs({"client_id": {"$exists": True}})

    for client in clients:
        end_date = client["end_date"]
        client_id = client["client_id"]

        days_left = (end_date - today).days
        print(days_left)

        if 0 < days_left <= reminder_days:
            message = (
                f"‚ùå –£ –∫–ª–∏–µ–Ω—Ç–∞: {client_id} –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞. \n"
                f"–û—Å—Ç–∞–ª—Å—è {days_left} –¥."
            )
            await bot.send_message(chat_id=config.tg_bot.channel_id, text=message)
            logging.info(
                f"Client: {client_id} is running out of subscriptions. Days left: {days_left} "
            )


async def notification_payment_cleared(
    bot: Bot, chat_id: int, amount: int, user, username
):
    text = f"üì£  –°—É–ø–µ—Ä! üî• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}({username})üë§ –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å—É–º–º—É {amount} üÖøÔ∏è"
    await bot.send_message(chat_id, text=text)
    logging.info(
        f"User: {user}({username}) has paid a subscription for the amount of {amount}"
    )


async def notification_trial_taken(bot: Bot, chat_id: int, user, username, client_id):
    text = (
        f"‚è± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}({username})üë§ –æ—Ñ–æ—Ä–º–∏–ª TRIAL(–ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥)\n"
        f"client_id: {client_id}"
    )
    await bot.send_message(chat_id, text=text)
    logging.info(
        f"User: {user}({username})üë§ has signed up for a TRIAL(trial period) ID: {client_id}"
    )
