from datetime import datetime

from aiogram import Bot

from tgbot.db.db_api import subs
from tgbot.config import config


async def get_data_in_subs(filter_criteria):
    collection = subs
    cursor = collection.find(filter_criteria)
    data = await cursor.to_list(length=None)
    return data


# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def send_message_interval(bot: Bot):
    today = datetime.now()
    reminder_days = 2  # –ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    users = await get_data_in_subs({"end_date": {"$exists": True}})

    for user in users:
        user_id = user["user_id"]
        end_date = user["end_date"]

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        days_left = (end_date - today).days

        if 0 < days_left <= reminder_days:
            message = f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ {days_left} –¥."
            await bot.send_message(chat_id=user_id, text=message)


# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ c ID –∫–ª–∏–µ–Ω—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def send_admin_end_date(bot: Bot):
    today = datetime.now()
    reminder_days = 1  # –ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏

    clients = await get_data_in_subs({"client_id": {"$exists": True}})

    for client in clients:
        end_date = client["end_date"]
        client_id = client["client_id"]

        days_left = (end_date - today).days
        print(days_left)

        if 0 < days_left <= reminder_days:
            message = (
                f"‚ùå –£ –∫–ª–∏–µ–Ω—Ç–∞: {client_id} –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞. \n"
                f"–û—Å—Ç–∞–ª—Å—è {days_left} –¥."
            )
            await bot.send_message(chat_id=config.tg_bot.channel_id, text=message)


# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏
async def send_message_pay(bot: Bot, chat_id: int, amount: int, user, username):
    text = f"üì£  –°—É–ø–µ—Ä! üî• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}({username})üë§ –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å—É–º–º—É {amount} üÖøÔ∏è"
    await bot.send_message(chat_id, text=text)


async def send_message_trial(bot: Bot, chat_id: int, user, username, client_id):
    text = (
        f"‚è± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}({username})üë§ –æ—Ñ–æ—Ä–º–∏–ª TRIAL(–ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥)\n"
        f"client_id: {client_id}"
    )
    await bot.send_message(chat_id, text=text)
